// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  pdfs      PDF[]
  quizzes   Quiz[]
  progress  Progress[]
  chats     Chat[]
  quizAttempts QuizAttempt[]

  @@map("users")
}

model PDF {
  id          String   @id @default(cuid())
  title       String
  filename    String
  filePath    String
  fileSize    Int
  uploadDate  DateTime @default(now())
  userId      String

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chunks      PDFChunk[]
  quizzes     Quiz[]
  chats       Chat[]

  @@map("pdfs")
}

model PDFChunk {
  id        String   @id @default(cuid())
  content   String
  pageNumber Int
  embedding String?  // Store vector embeddings as JSON string
  pdfId     String

  // Relations
  pdf       PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)

  @@map("pdf_chunks")
}

model Quiz {
  id          String      @id @default(cuid())
  title       String
  type        String      // MCQ, SAQ, LAQ, MIXED
  questions   String      // JSON string of questions
  answers     String?     // JSON string of correct answers
  createdAt   DateTime    @default(now())
  userId      String
  pdfId       String

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdf         PDF         @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  attempts    QuizAttempt[]

  @@map("quizzes")
}

model QuizAttempt {
  id              String   @id @default(cuid())
  userAnswers     String   // JSON string of user answers
  score           Float
  totalQuestions  Int
  completedAt     DateTime @default(now())
  quizId          String
  userId          String

  // Relations
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Progress {
  id              String   @id @default(cuid())
  subject         String
  totalQuizzes    Int      @default(0)
  completedQuizzes Int     @default(0)
  averageScore    Float    @default(0)
  strengths       String?  // JSON string of strong topics
  weaknesses      String?  // JSON string of weak topics
  lastUpdated     DateTime @default(now())
  userId          String

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("progress")
}

model Chat {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  pdfId     String?

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdf       PDF?     @relation(fields: [pdfId], references: [id], onDelete: SetNull)
  messages  ChatMessage[]

  @@map("chats")
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  role      String      // USER, ASSISTANT, SYSTEM
  createdAt DateTime    @default(now())
  chatId    String

  // Relations
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Enums are not supported in SQLite, using strings instead
// QuizType: MCQ, SAQ, LAQ, MIXED
// MessageRole: USER, ASSISTANT, SYSTEM
